# -*- coding: utf-8 -*-
"""calc_route-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cf8dr5JPvt78DQ0qmJQeurt6Lc-62POb
"""

import pandas as pd # Import the pandas library
import requests # Import the requests library
import numpy as np

# Declare variables
URL = "http://192.168.10.10/testCal"
route_1 = "1.662585, 103.598608"
route_2 = "1.463400, 103.764932"

# Load test data
# df = pd.read_csv('output-BJA8742_Sample_1.csv')
# df = pd.read_csv('dataset/output-BJA8742.csv')
df = pd.read_csv('dataset/output-BJA8742.csv')

print(df.shape)
print(df.head())

# Reset route_1, route_2 and route_num
df['route_num'] = 0
# df['route_1'] = 0.0
# df['route_2'] = 0.0

print(df.head())

# Calculate and update route_1 and route_2
def getDictionary(coords, route):
  return {"latlong1": coords, "latlong2": route}

status = 0
direction = 0
arr_index = 0

# Return the cooridnate dict
def poly_Dictionary(bus_service, first_point, last_point):
  return {"bus_service": bus_service, "first_point": first_point, "last_point": last_point}

# Determine if on the polyline
def check_poly(first_point, last_point):
  checkURL = "http://192.168.10.10/determineRoute"
  return requests.post(checkURL,  poly_Dictionary("7",first_point, last_point )).json()

# [0] Ignition off, Ignition on
# [1] Idling, Moving
def getStatus(row):
  status = row.split(";")

  if status[0] == "Ignition on":
    if status[1] == "Idling" :
      return 1
    elif status[1] == "Moving" :
      return 2
  else:
    return 0
  
#Start    
route_array = np.zeros(shape=(10,3))
distance_array = np.zeros(shape=(10,2))
position_array = dict()

#Create a sample size of 10
sample_size = 10
total_size = 200

for index, row in df.iterrows():
  latlng = str(row['Lat'])+','+str(row['Lng'])
  df.at[index, 'route_1'] = requests.post(URL, getDictionary(latlng, route_1)).json()
  df.at[index, 'route_2'] = requests.post(URL, getDictionary(latlng, route_2)).json()
  
  if index == total_size:
    break
    
# Determine the status based on coords
data_index = { "dir_key" : 0, "index_key" : -1 ,"reset_key" : 0 }
intial_position = None

for index, row in df.iterrows():
  current_row = str(row['Lat']) + ',' + str(row['Lng'])

  nextRow = df.iloc[index+1]
  next_row = str(nextRow.at['Lat']) + ',' + str(nextRow.at['Lng'])

  # If array size is 10
  if arr_index == sample_size:
    arr_index = 0

    min_route_1 = np.argmin(distance_array[:,[0]])
    min_route_2 = np.argmin(distance_array[:,[1]])
    
    if data_index["dir_key"] == 0 :
      if float(df.at[index, 'route_1']) < float(df.at[index, 'route_2']) and route_array[min_route_1][1] != -1 :
        data_index["index_key"] = int(route_array[min_route_1][0])
        data_index["dir_key"] = 1
      elif float(df.at[index, 'route_2']) < float(df.at[index, 'route_1']) and route_array[min_route_2][1] != -1 :
        data_index["index_key"] = int(route_array[min_route_2][0])
        data_index["dir_key"] = 2
        
    else:
      if float(df.at[index, 'route_2']) != float(df.at[index + 1, 'route_2']):
      if float(df.at[index, 'route_2']) != float(df.at[index + 1, 'route_2']):
      
      
      # if float(row["route_1"]) < 0.06 or float(row["route_2"]) < 0.06:
      if float(distance_array[min_route_1][0]) < 0.06 :
        data_index["index_key"] = int(route_array[min_route_1][0]) + 1
        data_index["dir_key"] = 0

      elif float(distance_array[min_route_2][1]) < 0.06:
        data_index["index_key"] = int(route_array[min_route_2][0]) + 1
        data_index["dir_key"] = 0
        
      else:
        data_index["index_key"] = -1
        
    print(data_index)
    k = 0
    for row in route_array:
      if row[0] == data_index["index_key"] :  
        df.at[row[0], 'route_num'] = data_index["dir_key"]
        data_index["reset_key"] = data_index["dir_key"]
        
        if data_index["dir_key"] == 0:
          intial_position = None
        else:
          intial_position = position_array[data_index["index_key"]]
        
      else:
        df.at[row[0], 'route_num'] = data_index["reset_key"]
        print(df.at[index, 'route_num'])
      
      print(row)
      k = k + 1
      
    else:
       df.at[index, 'route_num'] = data_index["dir_key"]

  else:
    if intial_position is None:
      route_array[arr_index] = [index, check_poly(current_row, next_row)["route_id"], row["Route"]]
    else:
      print(check_poly(intial_position, current_row)["route_id"])
      route_array[arr_index] = [index, check_poly(intial_position, current_row)["route_id"], row["Route"]]
      
    route_array[arr_index] = [index, check_poly(current_row, next_row)["route_id"], row["Route"]]
    distance_array[arr_index] = [row["route_1"], row["route_2"]]
    
    new_data = {index : current_row}
    position_array.update(new_data)
    
    arr_index = arr_index + 1
    
  if index > total_size:
    df.to_csv(r'output_2.csv', index = False)
    break